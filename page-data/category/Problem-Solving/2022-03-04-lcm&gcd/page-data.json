{"componentChunkName":"component---src-templates-blog-post-js","path":"/category/Problem-Solving/2022-03-04-lcm&gcd/","result":{"data":{"markdownRemark":{"html":"<h2>Lv 2. N개의 최소공배수</h2>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/12953\">문제</a></p>\n<p>최소공배수와 최대공약수를 구할 줄 알아야 하는 문제이다. 이번 기회에 유클리드 호제법을 정리한다.</p>\n<h2>유클리드 호제법</h2>\n<h3>최대공약수(GCD)</h3>\n<p>유클리드 호제법의 기본 원리는 <b>num1을 num2로 나눈 나머지를 r이라고 했을 때, GCD(num1, num2)=GCD(num2,r)과 같다는 것이다.</b>\n이를 재귀적으로 계속 하다보면 r이 0이 되고, 이때 나머지 num값이 최대 공약수가 된다.</p>\n<p>ex) GCD(48,36) = GCD(36, 12) = GCD(12,0) ==> GCD = 12</p>\n<h3>최소공배수(LCM)</h3>\n<p>num1<em>num2= GCD</em>LCM\n==> LCM = (num1*num2)/GCD</p>\n<p>풀이</p>\n<pre><code>function solution(arr) {\n    let answer=arr[0];\n    arr.sort((a,b)=>a-b);\n    for(let i=1;i&#x3C;arr.length;i++){\n        answer=(answer*arr[i])/getGCD(arr[i],answer);\n    }\n    return answer;\n}\nfunction getGCD(num1, num2){\n    let gcd = 1;\n    for(let i=2;i&#x3C;=num1;i++){\n        if(num1 % i === 0 &#x26;&#x26; num2 % i === 0){\n            gcd = i;\n        }\n    }\n    return gcd;\n}\n</code></pre>\n<p>유클리드 호제법을 재귀로 이용하여 풀었다.\nanswer에 arr의 맨 첫 원소를 넣고, arr의 1번째 원소부터 반복하며 최소공배수를 구하여 최종적으로 n개의 최소 공배수를 구했다.</p>","frontmatter":{"title":"N개의 최소공배수 (프로그래머스 LV.2)"}},"allMarkdownRemark":{"group":[{"category":"Algorithm","totalCount":8},{"category":"JavaScript","totalCount":7},{"category":"Problem-Solving","totalCount":25},{"category":"React","totalCount":3},{"category":"Web","totalCount":7}]}},"pageContext":{"slug":"/category/Problem-Solving/2022-03-04-lcm&gcd/"}},"staticQueryHashes":["2885866554"]}