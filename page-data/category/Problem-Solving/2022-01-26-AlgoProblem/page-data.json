{"componentChunkName":"component---src-templates-blog-post-js","path":"/category/Problem-Solving/2022-01-26-AlgoProblem/","result":{"data":{"markdownRemark":{"html":"<h2>프로그래머스</h2>\n<h3>Lv2. 입국 심사</h3>\n<p> </p>\n<p> 값이 10억이상이면 로그시간= 이진탐색</p>\n<p>times=> 선형 로그 시간으로도 충분히 가능.</p>\n<p>but 우리는 특정 값을 찾는 것이 아님.</p>\n<p>==> 우리가 찾는 것은 ' 최소 몇 분에 모든 심사가 끝나는가? ' 이다.</p>\n<p>ㄴ 결정문제 => 이진탐색 = 파라메트릭 서치 (Parametric Search)</p>\n<p>최소 1분에서 10억분 x n 시간 사이에 답이 있음.</p>\n<p>면접관들이 몇명을 처리하는가?</p>\n<p>처리 가능한 입국자 n보다 작다면 분을 올려야하고, 입국자가 n보다 크다면 분을 낮춰야 한다.</p>\n<p>면접관이 시간대비 몇명을 처리할 수 있는가를 알아야함.</p>\n<p>시간/심사시간*심사관 당 처리가능한 입국자 수</p>\n<h2>코드</h2>\n<pre><code>function solution(n, times){\n    const sortedTimes= times.sort((a,b)=>a-b); // O(nlogn)\n    let left=1; //1분부터(가장 빠르게 처리하는 속도)\n    let right=sortedTimes[sortedTimes.length-1]*n;//가장 느리게 처리하는 속도\n    while(left&#x3C;=right){\n        const mid= Math.floor((left+right)/2);\n        const sum=times.reduce((acc,time)=> acc+ Math.floor(mid/time),0); // sum= [시간/심사시간]\n        if(sum&#x3C;n){\n            left= mid+1;\n        }else{\n            right=mid-1;\n        }\n    }\n    return left;\n}\n</code></pre>\n<p>가장 빨리~ 가장 느리게 사이에서 시작=> 이진탐색으로</p>\n<p>시간을 구하는건데 (시간/심사시간) 을 하면 사람 수가 나옴.</p>\n<p>이 시간을 찾아가는 것. 사람 수는 아니까 사람 수가 적으면 시간을 올려, 많으면 내려.</p>\n<p>left와 right가 바뀌는 순간이 정답임.</p>","frontmatter":{"title":"입국 심사(프로그래머스 LV.2)"}},"allMarkdownRemark":{"group":[{"category":"Algorithm","totalCount":8},{"category":"JavaScript","totalCount":7},{"category":"Problem-Solving","totalCount":25},{"category":"React","totalCount":3},{"category":"Web","totalCount":7}]}},"pageContext":{"slug":"/category/Problem-Solving/2022-01-26-AlgoProblem/"}},"staticQueryHashes":["2885866554"]}