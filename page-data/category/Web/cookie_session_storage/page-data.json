{"componentChunkName":"component---src-templates-blog-post-js","path":"/category/Web/cookie_session_storage/","result":{"data":{"markdownRemark":{"html":"<h2>쿠키</h2>\n<ul>\n<li>클라이언트(브라우저) 로컬에 저장되는 키와 값이 들어있는 작은 데이터 파일.</li>\n<li>사용자 인증이 유효한 시간을 명시할 수 있으며 유효시간이 정해지면 브라우저가 종료되어도 인증이 유지된다.</li>\n<li>클라이언트의 상태 정보를 로컬에 저장했다가 참조한다.</li>\n<li>클라이언트에 300개까지 쿠키저장 가능, 하나의 도메인당 20개의 값만 가질 수 있음, 하나의 쿠키값은 4KB까지 저장</li>\n<li>쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송</li>\n<li>쿠키는 만료 기한이 있는 키-값 저장소입니다.</li>\n<li>쿠키는 처음부터 서버와 클라이언트 간의 지속적인 데이터 교환을 위해 만들어졌기 때문에 서버로 계속 전송됨. ⇒만약 4kb 용량 제한을 거의 다 채운 쿠키가 있다면, 요청을 할 때마다 기본 4kb의 데이터를 사용해야함. 4kb 중에는 서버에 필요하지 않은 데이터들도 있음 ⇒ 데이터 낭비 ⇒ <strong>로컬스토리지, 세션스토리지에 저장</strong></li>\n</ul>\n<h3>구성</h3>\n<ul>\n<li>이름(Name) : 각각의 쿠키를 구별하는 데 사용되는 이름</li>\n<li>값(Value) : 쿠키의 이름과 관련된 값</li>\n<li>유효시간(Expires) : 쿠키의 유지시간</li>\n<li>도메인(Domain): 쿠키를 전송할 도메인</li>\n<li>경로(Path): 쿠키를 전송할 요청 경로</li>\n</ul>\n<h3>동작방식</h3>\n<ol>\n<li>클라이언트가 페이지를 요청</li>\n<li>서버에서 쿠키를 생성</li>\n<li>HTTP 헤더에 쿠키를 포함 시켜 응답</li>\n<li>브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있음</li>\n<li>같은 요청을 할 경우 HTTP 헤더에 쿠키를 함께 보냄</li>\n<li>서버에서 쿠키를 읽어 이전 상태 정보를 변경 할 필요가 있을 때 쿠키를 업데이트 하여 변경된 쿠키를 HTTP 헤더에 포함시켜 응답</li>\n</ol>\n<h3>사용예시</h3>\n<ul>\n<li>방문 사이트에서 로그인 시, \"아이디와 비밀번호를 저장하시겠습니까?\"</li>\n<li>쇼핑몰의 장바구니 기능</li>\n<li>자동로그인, 팝업에서 \"오늘 더 이상 이 창을 보지 않음\" 체크, 쇼핑몰의 장바구니</li>\n</ul>\n<h2>로컬 스토리지 &#x26; 세션 스토리지</h2>\n<p>이 두 저장소의 데이터는 서버로 자동 전송되지 않음.</p>\n<p>두 스토리지는 모두 window 객체 안에 들어 있음. <strong>Storage</strong>\n객체를 상속받기 때문에 메소드가 공통적으로 존재.</p>\n<p>도메인 별<strong>용량 제한</strong>도 있음(프로토콜, 호스트, 포트가 같으면 같은 스토리지를 공유)</p>\n<p>모바일은 2.5mb, 데스크탑은 5mb~10mb라고 생각하시면 됨.</p>\n<p>이게 부족하다면 50mb를 기본적으로 저장할 수 있는<strong>IndexedDB</strong>를 씀.</p>\n<p>로컬 스토리지와 세션 스토리지는 HTML5에서 추가된 저장소.</p>\n<p>키-밸류 스토리지의 형태</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">로컬스토리지</th>\n<th align=\"center\">스토리지</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">데이터 영구</td>\n<td align=\"center\">사용자가 지우지 않는 한 영구</td>\n<td align=\"center\">윈도우, 탭 닫을 시 내용 제거</td>\n</tr>\n<tr>\n<td align=\"center\">사용방법</td>\n<td align=\"center\">자동 로그인</td>\n<td align=\"center\">일회성 로그인</td>\n</tr>\n<tr>\n<td align=\"center\">주의사항</td>\n<td align=\"center\">비밀번호와 같은 중요 정보는 절대 저장금지</td>\n<td align=\"center\">비밀번호와 같은 중요 정보는 절대 저장금지</td>\n</tr>\n</tbody>\n</table>\n<h2>세션</h2>\n<ul>\n<li>세션은 쿠키를 기반하고 있지만, 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 <strong>세션은 서버 측에서 관리</strong></li>\n<li>서버에서는 클라이언트를 구분하기 위해 세션 ID를 부여하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지</li>\n<li>물론 접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능</li>\n<li>사용자에 대한 정보를 서버에 두기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 <strong>서버 메모리</strong>를 많이 차지하게 됨.</li>\n<li>즉 동접자 수가 많은 웹 사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인이 됨.</li>\n<li>클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는 데 이것이 세션ID.\n<h3>동작 방식</h3>\n<ol>\n<li>클라이언트가 서버에 접속 시 세션 ID를 발급.</li>\n<li>클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있음</li>\n<li>클라리언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 서버에 전달해서 사용.</li>\n<li>서버는 세션 ID를 전달 받아서 별다른 작업없이 세션 ID로 세션에 있는 클라언트 정보를 가져옴.</li>\n<li>클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답.</li>\n</ol>\n<h3>특징</h3>\n<ul>\n<li>각 클라이언트에게 고유 ID를 부여</li>\n<li>세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공</li>\n<li><strong>보안 면에서 쿠키보다 우수</strong></li>\n<li>사용자가 많아질수록 <strong>서버 메모리를 많이 차지하게 됨</strong></li>\n</ul>\n<h3>사용예시</h3>\n<ul>\n<li>로그인 같이 보안 상 중요한 작업을 수행할 때 사용</li>\n</ul>\n</li>\n</ul>\n<h2>차이정리</h2>\n<h3>[1] 차이 정리</h3>\n<ol>\n<li>쿠키의 단점을 보완해 HTML5에서 '웹스토리지'라는 기술 탄생.</li>\n</ol>\n<p>1-1) 웹스토리지 : 로컬스토리지, 세션스토리지.</p>\n<p>1-2) 웹스토리지는 Key와 Value 형태로 이루어짐.</p>\n<p>1-3) 웹스토리지는 클라이언트에 대한 정보를 저장.</p>\n<p>1-4) 웹스토리지는 로컬에만 정보를 저장, 쿠키는 서버와 로컬에 정보를 저장.</p>\n<ol start=\"2\">\n<li>\n<p>로컬스토리지는 클라이언트에 대한 정보를 영구적으로 저장 ex) 자동 로그인 저장</p>\n</li>\n<li>\n<p>세션스토리지는 세션 종료 시(브라우저 닫을 경우) 클라이언트에 대한 정보 삭제 ex) 입력 폼 정보 저장</p>\n</li>\n</ol>\n<p>3-1) 로컬&#x26;세션스토리지</p>\n<p>장점1 : 서버에 불필요하게 데이터를 저장하지 않는다.</p>\n<p>3-2) 로컬&#x26;세션스토리지</p>\n<p>장점2 : 용량이 크다. (약 5Mb, 브라우저마다 차이 존재)</p>\n<p>3-3) 로컬&#x26;세션스토리지 단점 : HTML5를 지원하지 않는 브라우저의 경우 사용 불가</p>\n<ol start=\"4\">\n<li>쿠키는 만료 기한이 있는 Key, Value 형태의 저장소</li>\n</ol>\n<p>4-1) 쿠키 장점 : 대부분의 브라우저가 지원</p>\n<p>4-2) 쿠키 단점1 : 매 HTTP요청마다 포함되어 api호출로 서버에 부담.</p>\n<p>4-3) 쿠키 단점2 : 쿠키의 용량이 작음 (약 4Kb)</p>\n<p>4-4) 쿠키 단점3 : 암호화 존재 x -> 사용자 정보 도난 위험</p>\n<h3>[2] 각 예 - 어떤 유형의 데이터를 어디에 저장하면 좋을까?</h3>\n<ul>\n<li>자동 로그인 -> 로컬스토리지</li>\n<li>입력 폼 정보 -> 세션스토리지</li>\n<li>비로그인 장바구니 -> 세션스토리지</li>\n<li>다시 보지 않음 팝업 창 -> 쿠키</li>\n</ul>","frontmatter":{"title":"쿠키, 스토리지 차이점"}},"allMarkdownRemark":{"group":[{"category":"Algorithm","totalCount":8},{"category":"JavaScript","totalCount":7},{"category":"Problem-Solving","totalCount":25},{"category":"React","totalCount":3},{"category":"Web","totalCount":7}]}},"pageContext":{"slug":"/category/Web/cookie_session_storage/"}},"staticQueryHashes":["2885866554"]}