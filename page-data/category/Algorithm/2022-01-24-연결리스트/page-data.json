{"componentChunkName":"component---src-templates-blog-post-js","path":"/category/Algorithm/2022-01-24-연결리스트/","result":{"data":{"markdownRemark":{"html":"<h2>알고리즘 강의</h2>\n<h3>연결 리스트 만들기</h3>\n<pre><code>class Node {\n    constructor(value) {\n        this.value = value;// 값\n        this.next = null;// 포인터\n    }\n}\n\nclass SinglyLinkedList {\n    constructor() {\n        this.head = null;// head 포인터\n        this.tail = null;// tail 포인터\n    }\n\n    find(value) {\n        let curNode = this.head;\n        while (curNode.value !== value) {// 값을 찾을 때 까지 다음 요소로 넘어감\n        curNode = curNode.next;\n        }\n        return curNode;// 찾으면 해당 노드 반환\n    }\n\n    append(newValue) {\n        const newNode = new Node(newValue);// 받은 값을 그대로 사용하여 노드를 생성\n        if (this.head === null) { // 리스트에 아무 값도 없을 경우\n            this.head = newNode;\n            this.tail = newNode;\n        } else {\n            this.tail.next = newNode;\n            this.tail = newNode;\n        }\n    }\n\n    insert(node, newValue) {// param으로 받은 값 다음에 끼워 넣을 것임\n        const newNode = new Node(newValue);\n        newNode.next = node.next;\n        node.next = newNode;\n    }\n\n    remove(value) {// 선형 시간의 삭제, 만약 상수시간으로 하고 싶다면 삭제할 노드의 이전 값을 param으로 넣어줘야함.\n        let prevNode = this.head;\n        while (prevNode.next.value !== value) {\n        prevNode = prevNode.next;\n        }\n        if (prevNode.next !== null) {// 이전의 노드를 다음의 다음 노드를 가리키게 함 => 중간 노드가 아무런 연결도 없게 됨, 중간 노드는 garbage collection으로 수거 됨.\n        prevNode.next = prevNode.next.next;\n        }\n    }\n    display() {\n        let curNode = this.head;\n        let displayString = \"[\";\n        while (curNode !== null) {\n        displayString += `${curNode.value}, `;\n        curNode = curNode.next;\n        }\n        displayString = displayString.substr(0, displayString.length - 2);\n        displayString += \"]\";\n        console.log(displayString);\n    }\n}\n\nconst linkedList = new SinglyLinkedList();\nlinkedList.append(1);\nlinkedList.append(2);\nlinkedList.append(3);\nlinkedList.append(4);\nlinkedList.append(5);\nlinkedList.display();\nconsole.log(linkedList.find(3));\nlinkedList.remove(3);\nlinkedList.display();\nlinkedList.insert(linkedList.find(2), 10);\nlinkedList.display();\n</code></pre>","frontmatter":{"title":"Javascript로 연결리스트 만들기"}},"allMarkdownRemark":{"group":[{"category":"Algorithm","totalCount":8},{"category":"JavaScript","totalCount":7},{"category":"Problem-Solving","totalCount":25},{"category":"React","totalCount":3},{"category":"Web","totalCount":7}]}},"pageContext":{"slug":"/category/Algorithm/2022-01-24-연결리스트/"}},"staticQueryHashes":["2885866554"]}