{"componentChunkName":"component---src-templates-blog-post-js","path":"/category/Algorithm/2022-01-30-Algo/","result":{"data":{"markdownRemark":{"html":"<h2>알고리즘 강의</h2>\n<h3>순열</h3>\n<p>순열과 조합 재귀로 작성.</p>\n<p>순열이나 조합 사용하는 문제는 테스트케이스가 그렇게 크지 않아서 재귀로 풀어도 통과할 수 있다.</p>\n<pre><code>function permutations(arr, n) {\n    if (n === 1) return arr.map((v) => [v]);\n    let result = [];\n\n    arr.forEach((fixed, idx, arr) => {\n        const rest = arr.filter((_, index) => index !== idx);\n\n        const perms = permutations(rest, n - 1);\n\n        const combine = perms.map((v) => [fixed, ...v]);\n\n        result.push(...combine);\n    })\n\n    return result;\n}\n</code></pre>\n<p>1개만 뽑는다면 그대로 순열을 반환한다. 탈출 조건으로도 사용된다.</p>\n<p>result 배열을 선언하고 이곳에 결과를 넣는다.</p>\n<p>요소를 순환하며 현재 index를 제외한 요소를 추출한다. (index번째는 선택된 요소)</p>\n<p>선택된 요소를 제외하고 재귀 호출한다.</p>\n<p>선택된 요소와 재귀호출을 통해 구한 순열을 합쳐 결과 값을 추가한다.</p>\n<p>결과 반환해준다.</p>\n<h3>조합</h3>\n<pre><code>function combinations(arr, n) {\n    if (n === 1) return arr.map((v) => [v]);\n    const result = [];\n    arr.forEach((fixed, idx, arr) => {\n        const rest = arr.slice(idx + 1);\n        const combis = combinations(rest, n - 1);\n        const combine = combis.map((v) => [fixed, ...v]);\n        result.push(...combine);\n    });\n    return result;\n}\n</code></pre>\n<p>==> 1개만 뽑는다면 그대로 조합을 반환한다. 이는 탈출 조건으로도 사용된다.</p>\n<p>result라는 배열을 선언하여 이곳에 결과를 담는다.</p>\n<p>이후 요소들을 순환하며 index 이후 요소들을 추출한다. (index번째는 선택된 요소이다.)</p>\n<p>선택된 요소 이전 요소들을 제외하고 재귀 호출을 한다.</p>\n<p>선택된 요소와 재귀호출을 통해 구한 조합을 합쳐주고, 결과 값을 추가하여 결과를 반환한다.</p>","frontmatter":{"title":"Javascript로 순열, 조합 만들기"}},"allMarkdownRemark":{"group":[{"category":"Algorithm","totalCount":8},{"category":"JavaScript","totalCount":7},{"category":"Problem-Solving","totalCount":25},{"category":"React","totalCount":3},{"category":"Web","totalCount":7}]}},"pageContext":{"slug":"/category/Algorithm/2022-01-30-Algo/"}},"staticQueryHashes":["2885866554"]}