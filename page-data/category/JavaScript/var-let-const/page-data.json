{"componentChunkName":"component---src-templates-blog-post-js","path":"/category/JavaScript/var-let-const/","result":{"data":{"markdownRemark":{"html":"<h2>1. 변수 선언 방식</h2>\n<p>var는 변수를 한 번 더 선언해도 에러가 나오지 않고 각기 다른 값을 가진다.</p>\n<p>let과 const는 재선언할 경우 이미 선언된 변수라는 에러 메세지가 나온다.<br>\n=> 변수 재선언이 되지 않는다.</p>\n<h3>let과 const의 차이</h3>\n<p>let은 재할당이 가능하지만 const는 변수 재선언, 재할당 모두 불가능하다.</p>\n<h2>2. 호이스팅</h2>\n<p>호이스팅이란 var 선언문이나 function 선언문 등을 해당 스코프의 선두로 옮긴 것 처럼 동작하는 특성을 말한다.\n이는 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하여 발생하는 현상이다.</p>\n<p>자바스크립트는 ES6에서 도입된 let, const를 포함하여 모든 선언(var, let, const, function, function*, class)을 호이스팅한다.</p>\n<p>하지만 var로 선언된 변수와는 다르게 let으로 선언된 변수를 선언문 이전에 참조하면 참조 에러가 발생한다.</p>\n<p>이는 변수 생성 단계 때문이다.</p>\n<h3>1. 선언 단계</h3>\n<p>변수를 실행 컨텍스트의 변수 객체에 등록한다.이 변수 객체는 스코프가 참조하는 대상이 된다.</p>\n<h3>2. 초기화 단계</h3>\n<p>변수 객체에 등록된 변수를 위한 공간을 메모리에 확보한다.이 단계에서 변수는 undefined로 초기화 된다.</p>\n<h3>3. 할당 단계</h3>\n<p>undefined로 초기화된 변수에 실제 값을 할당한다.</p>\n<p>var으로 선언된 변수는 선언단계와 초기화 단계가 한번에 이루어진다. (바로 undefined로 초기화)<br>\n하지만 let으로 선언된 변수는 선언 단계와 초기화 단계가 분리되어 진행된다.<br>\n이때 초기화 단계 전에 let에 접근하면 일시적 사각지대(TDZ)에 빠지게 된다.</p>","frontmatter":{"title":"var let const 차이"}},"allMarkdownRemark":{"group":[{"category":"Algorithm","totalCount":8},{"category":"JavaScript","totalCount":7},{"category":"Problem-Solving","totalCount":25},{"category":"React","totalCount":3},{"category":"Web","totalCount":7}]}},"pageContext":{"slug":"/category/JavaScript/var-let-const/"}},"staticQueryHashes":["2885866554"]}