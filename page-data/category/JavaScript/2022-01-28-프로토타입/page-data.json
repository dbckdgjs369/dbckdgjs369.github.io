{"componentChunkName":"component---src-templates-blog-post-js","path":"/category/JavaScript/2022-01-28-프로토타입/","result":{"data":{"markdownRemark":{"html":"<h2>ProtoType 이해</h2>\n<hr>\n<p> 자바스크립트는 클래스가 없다. (class키워드는 지원하기 시작했지만 여전히 프로토타입 기반의 언어다.) <br/> 상속관점에서 자바스크립트의 유일한 생성자는 객체뿐이다. 각각의 객체는 [[Prototype]]이라는 private 속성을 가지는데 자신의 <b>프로토타입</b>이 되는 다른 객체를 가리킨다. 그 객체의 프로토타입 또한 프로토타입을 가지고 있고, 이것이 반복되다 결국 null을 프로토타입으로 가지는 오브젝트에서 끝난다. null은 더 이상의 프로토타입이 없다고 정의되며, 프로토타입 체인의 종점이다.</p>\n<pre><code>let f = function () {\n    this.a = 1;\n    this.b = 2;\n}\nlet o = new f(); // {a: 1, b: 2}\n\n// f 함수의 prototype 속성 값들을 추가\nf.prototype.b = 3;\nf.prototype.c = 4;\n</code></pre>\n<p>위의 코드는 다음과 같은 구조가 된다.</p>\n<p>{a: 1, b: 2} ---> {b: 3, c: 4} ---> Object.prototype ---> null</p>\n<pre><code>console.log(o.a); // 1\n// o는 'a'라는 속성을 가지는가? 그렇다. 속성의 값은 1이다.\n\nconsole.log(o.b); // 2\n// o는 'b'라는 속성을 가지는가? 그렇다. 속성의 값은 2이다.\n// 프로토타입 역시 'b'라는 속성을 가지지만 이 값은 쓰이지 않는다. 이것을 \"속성의 가려짐(property shadowing)\" 이라고 부른다.\n\nconsole.log(o.c); // 4\n// o는 'c'라는 속성을 가지는가? 아니다. 프로토타입을 확인해보자.\n// o.[[Prototype]]은 'c'라는 속성을 가지는가? 가지고 값은 4이다.\n\nconsole.log(o.d); // undefined\n</code></pre>\n<br/>\n<h2>메소드 상속</h2>\n<p> 자바스크립트에 \"메소드\"라는건 없다. 하지만 자바스크립트는 객체의 속성으로 함수를 지정할 수 있고 속성 값을 사용하듯 쓸 수 있다. 속성 값으로 지정한 함수의 상속 역시 위에서 본 속성의 상속과 동일하다. (단 위에서 언급한 \"속성의 가려짐\" 대신 \"메소드 오버라이딩, method overriding\" 라는 용어를 사용한다)</p>\n<h2>Javascript 에서 프로토타입을 사용하는 방법</h2>\n<p>우리가 doSomeInstancing의 속성에 접근할때 브라우저는 우선 doSomeInstancing이 그 속성을 갖고있는지 확인한다.만약 doSomeInstancing이 속성을 갖고있지 않다면, 브라우저는 doSomeInstancing의 <strong>proto</strong>(doSomething.prototype)가 그 속성을 갖고있는지 확인한다. 만약 doSomeInstancing의 <strong>proto</strong>가 브라우저가 찾던 속성을 갖고 있다면, doSomething의 <strong>proto</strong>가 갖고있는 그 속성을 사용한다.<br>\n그렇지 않고, doSomeInstancing의 <strong>proto</strong>가 그 속성을 갖고있지 않을때에는 doSomeInstancing의 <strong>proto</strong>의 <strong>proto</strong>가 그 속성을 갖는지 확인한다. 기본적으로, 어떠한 함수던지 그 함수의 prototype 속성의 <strong>proto</strong>는 window.Object.prototype이고, window.Object.prototype의 <strong>proto</strong>는 null이다. null을 만날 때까지 모든 프로토타입 체인이 검사 되고 브라우저가 더이상 검사할 <strong>proto</strong>가 없을때에서야 브라우저는 우리가 찾던 값이 undefined라고 결론짓는다.</p>\n<h2>객체를 생성하는 여러가지 방법과 프로토타입 체인의 결과</h2>\n<pre><code>var o = {a: 1};\n\n// o 객체는 프로토타입으로 Object.prototype 을 가진다.\n// 이로 인해 o.hasOwnProperty('a') 같은 코드를 사용할 수 있다.\n// hasOwnProperty 라는 속성은 Object.prototype 의 속성이다.\n// Object.prototype 의 프로토타입은 null 이다.\n// o ---> Object.prototype ---> null\n\nvar a = [\"yo\", \"whadup\", \"?\"];\n\n// Array.prototype을 상속받은 배열도 마찬가지다.\n// (이번에는 indexOf, forEach 등의 메소드를 가진다)\n// 프로토타입 체인은 다음과 같다.\n// a ---> Array.prototype ---> Object.prototype ---> null\n\nfunction f(){\nreturn 2;\n}\n\n// 함수는 Function.prototype 을 상속받는다.\n// (이 프로토타입은 call, bind 같은 메소드를 가진다)\n// f ---> Function.prototype ---> Object.prototype ---> null\n</code></pre>\n<h2>프로토타입 상속의 종류</h2>\n<h3>위임형 상속(Delegation inheritance)</h3>\n<br/>\n&ensp;위임형 상속에서 프로토타입 객체는 다른 객체의 기반이 된다. 위임 프로토타입을 상속받을 경우 새 객체는 해당 프로토타입에 대한 참조를 가지고 있다.\n<p>새 객체의 속성에 접근할 때, 해당 객체가 직접적으로 속성을 소유하고 있는지 먼저 체크한다. 없다면 다음 순서로 [[Prototype]]을 체크한다. 이 과정은 프로토타입 체인을 따라서 모든 객체의 프로토타입 체인의 최상위에 있는 객체인 Object.prototype에 도달할 때 까지 반복된다.</p>\n<p>메소드를 위임 상속할 경우 모든 객체가 각 메소드에에 대해 하나의 코드를 공유하므로 메모리를 절약할 수 있다.</p>\n<h3>연결형 상속(Concatenative inheritance)</h3>\n<br/>\n&ensp;연결형 상속은 한 객체의 속성을 다른 객체에 모두 복사함으로써 상속을 구현하는 방법이다.\n<p> 이 상속법은 Javascript 객체의 동적 확장성을 이용한 방법이다. 객체 복사는 속성의 초기값을 저장하기 위한 좋은 방법이다: 이 방식은 Object.assign()을 통해 구현하는 것이 보통이며 ES6 이전에 Lodash, Underscore, jQuery등의 라이브러리들이 .extend() 와 비슷한 메소드로 제공한 방법이다.\n연결형 상속은 매우 좋은 방법이며 클로져와 같이 사용한다면 훨씬 효과적인 상속 방식입니다.</p>\n<h3>함수형 상속(Functional inheritance)</h3>\n<p> 이 방법은 새 속성들을 연결형 상속으로 쌓되 상속 기능을 Factory 함수로 만들어 사용하는 방식이다.</p>\n<p>기존의 객체를 확장하는데 쓰이는 함수를 일반적으로 믹스인 함수라 칭한다. 객체 확장에 함수를 사용하는 가장 큰 이점은 Private Data를 클로져를 통해 캡슐화 시킬 수 있다는 점이다.</p>\n<p>다르게 말하자면 Private 상태를 지정할 수 있다는 의미이다.</p>\n<h2>결론</h2>\n<p> 복잡한 코드를 작성하여 이용하기 전에 프로토타입 기반의 상속 모델을 이해하는 것이 중요하다. 또한 프로토타입 체인의 길이는 성능을 저해하지 않도록 줄이는 방법을 고안해야 한다. 또한 빌트인 프로토타입은 새로운 자바스크립트 기능과 호환성을 갖기 위한 이유가 아닌 이상 절대 확장해서는 안된다.</p>","frontmatter":{"title":"Javascript Prototype"}},"allMarkdownRemark":{"group":[{"category":"Algorithm","totalCount":8},{"category":"JavaScript","totalCount":7},{"category":"Problem-Solving","totalCount":25},{"category":"React","totalCount":3},{"category":"Web","totalCount":7}]}},"pageContext":{"slug":"/category/JavaScript/2022-01-28-프로토타입/"}},"staticQueryHashes":["2885866554"]}