{"version":3,"file":"component---src-templates-category-js-8216cc7ad77ccee801b5.js","mappings":"yJAWA,SAASA,EAAT,GAAgD,IAAD,IAAhCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACzBC,GAASC,EAAAA,EAAAA,gBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBL,MAExC,OACE,yBACE,qBAAQM,EAAkBN,EAAN,MAAiBM,EAAiBN,IACtD,gBAAMO,KAAK,cAAcC,QAASJ,KAClC,gBAAMK,SAAS,WAAWD,QAASR,KACnC,gBAAMS,SAAS,iBAAiBD,QAASJ,KACzC,gBAAMK,SAAS,UAAUD,QAAQ,aACjC,gBAAMD,KAAK,eAAeC,QAAQ,aAClC,gBAAMD,KAAK,kBAAkBC,SAAS,UAAAN,EAAKG,oBAAL,eAAmBK,SAAnB,MACtC,gBAAMH,KAAK,gBAAgBC,QAASR,KACpC,gBAAMO,KAAK,sBAAsBC,QAASJ,IACzCH,EAGN,CAEDH,EAAIa,aAAe,CACjBZ,YAAY,IAQd,K,8FCbA,UAlCiB,SAAC,GAAqC,IAAnCa,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC1Bd,EAAUY,EAAKV,KAAKG,aAApBL,MACAe,EAAaD,EAAbC,SACR,EAA8BH,EAAKI,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,sBAEOH,EAFP,IAITK,GAAQ,qFAKd,OACE,QAAC,IAAD,CAAQP,SAAUA,EAAUb,MAAOA,IACjC,QAAC,IAAD,CAAKA,MAAOA,KACZ,kBAAKmB,IACL,QAACC,EAAD,KAEGH,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAvB,EAAUsB,EAAKG,YAAfzB,MACR,OACE,cAAI0B,IAAKH,IACP,QAAC,EAAAI,KAAD,CAAMC,GAAE,GAAKL,GAASvB,GAG3B,MAEH,QAAC,EAAA2B,KAAD,CAAMC,GAAG,KAAT,2BAGL,C","sources":["webpack://groot-tech-blog/./src/components/seo.js","webpack://groot-tech-blog/./src/templates/category.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import { graphql, Link } from \"gatsby\"\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport styled from \"@emotion/styled\"\n\n// SitePageContext로부터 context를 이용해 전달한 값들의 type을 얻을 수 있다.\nconst Category = ({ data, location, pageContext }) => {\n  const { title } = data.site.siteMetadata\n  const { category } = pageContext // gatsby-node.js의 createPage에서 넣어준 카테고리 이름.\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } categorized with \"${category}\"`\n\n  const StyledUl = styled.ul`\n    list-style: none;\n    margin: 0;\n  `\n\n  return (\n    <Layout location={location} title={title}>\n      <SEO title={title} />\n      <h1>{tagHeader}</h1>\n      <StyledUl>\n        {/* 각 카테고리에 해당하는 포스트의 목록을 출력한다. */}\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={`${slug}`}>{title}</Link>\n            </li>\n          )\n        })}\n      </StyledUl>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport default Category\n\n// 쿼리의 argument인 $category는 page context로 전달 받는다.\nexport const pageQuery = graphql`\n  query Category($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Seo","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author","defaultProps","data","location","pageContext","category","allMarkdownRemark","edges","totalCount","tagHeader","StyledUl","map","node","slug","fields","frontmatter","key","Link","to"],"sourceRoot":""}